<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="clr-namespace:DrugHouse.View.Controls"
					xmlns:viewModel="clr-namespace:DrugHouse.ViewModel;assembly=DrugHouse.Sticker"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:system="clr-namespace:System;assembly=mscorlib"
					xmlns:tabs="clr-namespace:DrugHouse.ViewModel.Tabs;assembly=DrugHouse.Sticker"
					mc:Ignorable="d">

	<!-- 
		 This Color will be used to draw a border around the TabControl, on 
		 the bottom of the TabItemPanel and on the bottom of unselected TabItems.
	  -->
	<Color x:Key="BorderColorBase">#888</Color>

	<!-- 
		 This Color will be used to draw the (outer) background of TabPages and
		 the selected TabItem.
	  -->
	<Color x:Key="TabControlBackgroundColorBase">#EEF7FF</Color>

	<Color x:Key="TabItemForegroundColorBase">#4971A3</Color>

	<!-- Brushes used for styling the TabControl -->
	<SolidColorBrush x:Key="TabControlBackgroundBrushBase" 
					   Color="{StaticResource TabControlBackgroundColorBase}"/>

	<!-- Brushes for drawing the outer and inner borders on TabPages -->
	<SolidColorBrush x:Key="TabPageInnerBorderBrushDark" 
					   Color="#FF8DB2E3"/>
	<LinearGradientBrush x:Key="TabPageInnerBorderBrushBright" 
						   StartPoint="0,0" EndPoint="1,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Offset="0" Color="Transparent"/>
			<GradientStop Offset="1" Color="#FFC0F9FF"/>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<!-- 
		 We only want to render a line between the TabControl's TabPage-area and
		 the TabItemsPanel where there is no TabItem/TabStrip. However, we cannot
		 simply set the TabItemPanel's Background-Property as this would affect
		 the area as a whole.
		 The trick here is to define a gradient that only renders a 1px line at
		 the bottom. Since TabItems are rendered above the background, this line
		 will only be visible in the area that doesn't contain a TabItem.
		 We'll achieve this effect by using a gradient that finishes with the
		 border-Color, but only for the last .01%.
	  -->
	<LinearGradientBrush x:Key="TabItemPanelBackgroundBrush" 
						   StartPoint="0,0" EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Offset="0.98" Color="Transparent"/>
			<GradientStop Offset="0.99" 
			   Color="{StaticResource BorderColorBase}"/>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<!-- Brushes used for styling TabItems (Background) -->
	<LinearGradientBrush x:Key="TabItemBackgroundBrushDisabled" 
						   StartPoint="0,0" EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#EEE" Offset="0"/>
			<GradientStop Color="#BBB" Offset="0.98"/>
			<!-- 
			   This is the same trick as with the TabItemPanel_BackgroundBrush (see there).
			-->
			<GradientStop Color="{StaticResource BorderColorBase}" 
						  Offset="0.99"/>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="TabItemBackgroundBrushSelected" 
						   StartPoint="0,0" EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#FFFFC14A" Offset="0.1" />
			<GradientStop Color="{StaticResource TabControlBackgroundColorBase}" 
						  Offset="0.15"/>
			<GradientStop Color="#C5DBF6" Offset="0.8"/>
			<GradientStop Color="{StaticResource TabControlBackgroundColorBase}" 
						  Offset="1.0"/>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="TabItemBackgroundBrushUnselected" 
						   StartPoint="0,0" EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#E8F2FF" Offset="0.0"/>
			<GradientStop Color="#DFE9F6" Offset="0.3"/>
			<GradientStop Color="#C7D8EE" Offset="0.7"/>
			<GradientStop Color="#B9CADE" Offset="0.98"/>
			<!-- See the TabItemPanel_BackgroundBrush comment. -->
			<GradientStop Color="{StaticResource BorderColorBase}" 
						  Offset="0.99"/>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="TabItemHoverBackgroundBrush" 
						   EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FFFFD5A0" Offset="0.3" />
		<GradientStop Color="#FFFFA335" Offset="0.51" />
		<GradientStop Color="#FFFFC14A" Offset="0.98" />
	</LinearGradientBrush>

	<!-- Brushes used for styling TabItems (Foreground/Text) -->
	<SolidColorBrush x:Key="TabItemTextBrushUnselected" Color="#4971A3" />
	<SolidColorBrush x:Key="TabItemTextBrushDisabled" Color="#888" />
	<SolidColorBrush x:Key="TabItemTextBrushHover" Color="Indigo" />
	<SolidColorBrush x:Key="TabItemTextBrushSelected" Color="DarkBlue" />

	<!-- Brushes used for styling TabItems (Borders) -->
	<!-- 
		 For all borders around the TabItems, we'll have to use either the 
		 identical Color OR (what's being done here) we'll have to assure the
		 bottom of the border will always result in the Color that is being
		 used for drawing the line between the TabControl and the TabItemPanel.
	  
		 If we do use a different (solid) Color here, the bottom line will not
		 be rendered as desired which I presume is a matter of precedence in the
		 way borders are being drawn (anti-clockwise, starting with bottom and
		 finishing with left, hence the effect of the left and right edges of 
		 the bottom line being drawn with the left and right border respectively).
		 If you want to try it out, exchange the LinearGradientBrush with the
		 SolidColorBrush that has been commented out and run the app.
		 You'll probably have to zoom in to see the effect. 
	  -->
	<!--<SolidColorBrush x:Key="TabItem_DisabledBorderBrush" Color="#CCC" />-->
	<LinearGradientBrush x:Key="TabItemDisabledBorderBrush" 
						   StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#CCC" Offset="0"/>
		<GradientStop Color="{StaticResource BorderColorBase}" 
					   Offset="0.8"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="TabItemBorderBrushSelected" 
					   Color="{StaticResource BorderColorBase}" />
	<!-- See the comment regarding the TabItem_DisabledBorderBrush above. -->
	<LinearGradientBrush x:Key="TabItemBorderUnselected" 
						   StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#AAA" Offset="0"/>
		<GradientStop Color="{StaticResource BorderColorBase}" 
					   Offset="0.8"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="TabItemHoverBorderBrush" StartPoint="0,0" 
						   EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Offset="0.98" Color="DarkOrange"/>
			<!-- See the TabItemPanel_BackgroundBrush comment. -->
			<GradientStop Offset="0.99" 
						  Color="{StaticResource BorderColorBase}"/>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<!-- 
		 Margins for TabItems - these will be set in the respective triggers.
	  -->
	<Thickness x:Key="TabItemMarginBase">0,8,-4,0</Thickness>
	<Thickness x:Key="TabItemMarginSelected">-4,0,-4,0</Thickness>
	<Thickness x:Key="TabItemMarginHover">0,4,-4,0</Thickness>
	<Thickness x:Key="TabItemPanelPadding">4,0,0,0</Thickness>


	<!--<Thickness x:Key="TabItemMargin_Hover">0,4,-4,0</Thickness>-->
	<Thickness x:Key="TabItemMarginHoverStart">0,2,0,0</Thickness>
	<Thickness x:Key="TabItemMarginHoverFinal">0,4,0,0</Thickness>

	<!-- This will run when a TabItem enters the "Unselected" state -->
	<Storyboard x:Key="TabItemStoryBoardUnselected">
		<ThicknessAnimation Storyboard.TargetName="Border" 
							 Storyboard.TargetProperty="Margin"
							 To="{StaticResource TabItemMarginBase}"
							 FillBehavior="HoldEnd"
							 Duration="0:0:0.1"/>
	</Storyboard>
	<!-- This will run when a TabItem enters the "Selected" state -->
	<Storyboard x:Key="TabItemStoryBoardSelected">
		<ThicknessAnimation Storyboard.TargetName="Border" 
							 Storyboard.TargetProperty="Margin"
							 To="{StaticResource TabItemMarginSelected}" 
							 FillBehavior="HoldEnd"
							 Duration="0:0:0.1"/>
	</Storyboard>
	<!-- This will run when a TabItem enters the "Hover" state -->
	<Storyboard x:Key="TabItemStoryBoardHover">
		<ThicknessAnimationUsingKeyFrames Storyboard.TargetName="Border" 
										   Storyboard.TargetProperty="Margin"
										   FillBehavior="HoldEnd">
			<SplineThicknessKeyFrame KeyTime="0:0:0.1"
									 Value="{StaticResource TabItemMarginHoverStart}"/>
			<SplineThicknessKeyFrame KeyTime="0:0:0.2"
									 Value="{StaticResource TabItemMarginHoverFinal}"/>
		</ThicknessAnimationUsingKeyFrames>
	</Storyboard>

	<!--******** Stuff for the TabItemCloseButton (added in part IV) -> ************-->
	<SolidColorBrush x:Key="TabItemCloseButtonNormalForegroundBrush"
					   Color="{StaticResource TabItemForegroundColorBase}"/>
	<SolidColorBrush x:Key="TabItemCloseButtonHoverForegroundBrush"
					   Color="White"/>
	<SolidColorBrush x:Key="TabItemCloseButtonPressedForegroundBrush"
					   Color="#EEEE"/>

	<LinearGradientBrush x:Key="TabItemCloseButtonNormalBackgroundBrush" 
						   StartPoint="0,0" EndPoint="1,0">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#5FFF" Offset="0.0"/>
				<GradientStop Color="#5CCC" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="TabItemCloseButtonNormalBorderBrush" 
						   StartPoint="0,0" EndPoint="1,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#5CCC" Offset="0.0"/>
				<GradientStop Color="#5444" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="TabItemCloseButtonHoverBackgroundBrush" 
						   StartPoint="0,1" EndPoint="1,0">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFDF2B1E" Offset="0.0"/>
				<GradientStop Color="#FFA41F00" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="TabItemCloseButtonPressedBackgroundBrush" 
						   StartPoint="0,0" EndPoint="1,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFA41F00" Offset="0.0"/>
				<GradientStop Color="#FFDF2B1E" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="TabItemCloseButtonPressedBorderBrush" 
						   StartPoint="0,0" EndPoint="1,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#5444" Offset="0.0"/>
				<GradientStop Color="#5CCC" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<system:Double x:Key="CloseButtonWidthAndHeight">14</system:Double>
	<Geometry x:Key="X_CloseButton">M0,0 L10,10 M0,10 L10,0</Geometry>


	<Style x:Key="TabItemCloseButtonStyle" TargetType="{x:Type Button}">
		<!-- 
			The default value for SnapsToDevicePixels actually is False
			(so this setter really wouldn't be required). However, I'm 
			adding this nevertheless in order to explicitly point out that,
			in this case, it is required (see below).
		 -->
		<Setter Property="SnapsToDevicePixels" Value="false"/>
		<Setter Property="Height" Value="{StaticResource CloseButtonWidthAndHeight}"/>
		<Setter Property="Width" Value="{StaticResource CloseButtonWidthAndHeight}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="ButtonBorder"  
						  CornerRadius="2" 
						  BorderThickness="1"
						  Background="{StaticResource TabItemCloseButtonNormalBackgroundBrush}"
						  BorderBrush="{StaticResource TabItemCloseButtonNormalBorderBrush}">
						<Grid>
							<!-- The Path below will render the button's X. -->
							<Path x:Name="ButtonPath" 
							  Margin="2"
							  Data="{StaticResource X_CloseButton}"
							  Stroke="{StaticResource TabItemCloseButtonNormalForegroundBrush}" 
							  StrokeThickness="2"
							  StrokeStartLineCap="Round"
							  StrokeEndLineCap="Round"
							  Stretch="Uniform"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"/>
							<!-- We don't really need the ContentPresenter, but what the heck ... -->
							<ContentPresenter HorizontalAlignment="Center"
										  VerticalAlignment="Center"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="ButtonBorder" Property="Background" 
								Value="{StaticResource TabItemCloseButtonHoverBackgroundBrush}" />
							<Setter TargetName="ButtonPath" Property="Stroke" 
								Value="{StaticResource TabItemCloseButtonHoverForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="ButtonBorder" 
								Property="Background" 
								Value="{StaticResource TabItemCloseButtonPressedBackgroundBrush}" />
							<Setter TargetName="ButtonBorder" 
								Property="BorderBrush" 
								Value="{StaticResource TabItemCloseButtonPressedBorderBrush}" />
							<Setter TargetName="ButtonPath" Property="Stroke" 
								Value="{StaticResource TabItemCloseButtonPressedForegroundBrush}"/>
							<!-- 
						   Simulate a pressed-effect by moving the contents down and to the right.
						   Since the button is pretty small, the trick here is to only shift things
						   just a tiny little bit, hence the fractional values below.
						   Note that, in order for this to work as expected, SnapsToDevicePixels
						   must be set to "false" (see the setter at the top of this style).
						-->
							<Setter TargetName="ButtonPath" Property="Margin" Value="2.5,2.5,1.5,1.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--******** <- Stuff for the TabItemCloseButton (added in part IV) ************-->


	<!-- The TabControl's Style. -->
	<Style x:Key="TabControlStyle" TargetType="{x:Type TabControl}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabControl">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<!-- 
						The Border around each TabItem will allow us to draw the line
						between the TabItemPanel and the TabControl (resp. the 
						TabPage-container) when a TabItem is NOT selected, which 
						replaces the bottom line of the TabItemPanel's border. 
						Thus, we'll avoid drawing the bottom line for the selected
						TabItem. Also, since the TabItem, when selected, applies a left
						Margin of 4px, we need to add these here as Padding.
					 -->
						<Border Background="{StaticResource TabItemPanelBackgroundBrush}" 
							 Padding="{StaticResource TabItemPanelPadding}">
							<!-- This is the area in which TabItems (the strips) will be drawn. -->
							<TabPanel IsItemsHost="True"/>
						</Border>

						<!-- 
						This is the outer border of the TabControl itself, actually meaning
						the Panel that will host a TabItem's content.
						The top-border here will not be drawn as, otherwise, the TabItemPanel
						would always show a thin line for the selected Tab (which we want 
						to avoid).
					 -->
						<Border BorderThickness="1,0,1,1" 
							 Grid.Row="1" 
							 BorderBrush="{StaticResource TabItemBorderBrushSelected}" 
							 Background="{StaticResource TabControlBackgroundBrushBase}">
							<!-- This is the first/outer Border drawn on the TabPage -->
							<Border BorderThickness="1" 
								BorderBrush="{StaticResource TabPageInnerBorderBrushDark}" 
								CornerRadius="3" 
								Margin="8">
								<!-- 
							  This is the second/inner Border drawn on the TabPage. 
							  This Border is drawn with a horizontal Gradient that is transparent
							  on the left which produces the fading effect.
						   -->
								<Border BorderThickness="1" 
								   BorderBrush="{StaticResource TabPageInnerBorderBrushBright}" 
								   CornerRadius="2" 
								   Margin="0" 
								   Padding="2,2,3,3"
								   >
									<!-- 
								 This is where the Content of the selected TabPage 
								 will be rendered. 
							  -->
									<ContentPresenter ContentSource="SelectedContent" Margin="0"/>
								</Border>
							</Border>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- The Style for TabItems (strips). -->
	<Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<!-- The Grid helps defining the general height of TabItems. -->
					<Grid Height="35" VerticalAlignment="Bottom">
						<!-- 
						The important aspect here is that the bottom of the Border is 0px thick,
						helping the TabItem/strip to blend into the TabPage.

					 -->
						<Border Name="Border"
							 Background="{StaticResource TabItemBackgroundBrushUnselected}"
							 BorderBrush="{StaticResource TabItemBorderBrushSelected}" 
							 Margin="{StaticResource TabItemMarginSelected}" 
							 BorderThickness="2,1,1,0" 
							 CornerRadius="3,3,0,0" 
							 >
							<!-- This is where the Content of the TabItem will be rendered. -->
							<Grid VerticalAlignment="Stretch"
										  HorizontalAlignment="Center" Margin="7,2,12,2" >
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="20"/>
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<TextBlock Grid.Column="0" VerticalAlignment="Center" 
										   Text="{Binding TabName}" d:DataContext="{d:DesignInstance tabs:ITabViewModel}" />
								<Button x:Name="cmdTabItemCloseButton"
								   Style="{StaticResource TabItemCloseButtonStyle}"
								   Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.CloseTabCommand}"
								   CommandParameter="{Binding}"
								   Grid.Column="2"
								   Margin="-7,5,7,5"/>
									   
							</Grid>

						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<!-- The appearance of a TabItem when it's inactive/unselected -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Border.IsMouseOver" Value="False"/>
								<Condition Property="IsSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- The Triggers required to animate the TabItem when it enters/leaves the "Unselected" state (added in part two) -->
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="sbUnselected"
											Storyboard="{StaticResource TabItemStoryBoardUnselected}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<StopStoryboard BeginStoryboardName="sbUnselected"/>
							</MultiTrigger.ExitActions>
							<Setter Property="Panel.ZIndex" Value="90" />
							<Setter TargetName="Border" Property="Background" 
								Value="{StaticResource TabItemBackgroundBrushUnselected}" />
							<Setter TargetName="Border" Property="BorderBrush" 
								Value="{StaticResource TabItemBorderUnselected}" />
							<Setter Property="Foreground" 
								Value="{StaticResource TabItemTextBrushUnselected}" />
							<!-- Except for the selected TabItem, tabs are to appear smaller in height. -->
							<Setter TargetName="Border" Property="Margin" 
								Value="{StaticResource TabItemMarginBase}"/>
						</MultiTrigger>

						<!-- 
						The appearance of a TabItem when it's disabled 
						(in addition to Selected=False)
					 -->
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Panel.ZIndex" Value="80" />
							<Setter TargetName="Border" Property="BorderBrush"
								Value="{StaticResource TabItemDisabledBorderBrush}" />
							<Setter TargetName="Border" Property="Background" 
								Value="{StaticResource TabItemBackgroundBrushDisabled}" />
							<Setter Property="Foreground" 
								Value="{StaticResource TabItemTextBrushDisabled}" />
							<Setter TargetName="Border" Property="Margin" 
								Value="{StaticResource TabItemMarginBase}"/>
						</Trigger>

						<!-- The appearance of a TabItem when the mouse hovers over it -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Border.IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- The Triggers required to animate the TabItem when it enters/leaves the "Hover" state (added in part two) -->
							<MultiTrigger.EnterActions>
								<StopStoryboard BeginStoryboardName="sbUnselected_Hover_Exit"/>
								<BeginStoryboard x:Name="sbHover"
											Storyboard="{StaticResource TabItemStoryBoardHover}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard x:Name="sbUnselected_Hover_Exit" Storyboard="{StaticResource TabItemStoryBoardUnselected}"/>
							</MultiTrigger.ExitActions>
							<Setter Property="Panel.ZIndex" Value="99" />
							<Setter Property="Foreground" Value="{StaticResource TabItemTextBrushHover}" />
							<Setter Property="BorderBrush" 
								TargetName="Border" 
								Value="{StaticResource TabItemHoverBorderBrush}" />
							<Setter TargetName="Border" Property="BorderThickness" Value="2,1,1,1" />
							<Setter Property="Background" TargetName="Border"
								Value="{StaticResource TabItemHoverBackgroundBrush}"/>
							<!-- 
						   To further increase the hover-effect, extend the TabItem's height a little
						   more compared to unselected TabItems.
						-->
							<Setter TargetName="Border" Property="Margin" 
								Value="{StaticResource TabItemMarginHoverFinal}"/>
							<!--
						   At runtime, we want a transition when changing between the regular/hover/regular
						   states.
						-->
						</MultiTrigger>

						<!-- The appearance of a TabItem when it's active/selected -->
						<Trigger Property="IsSelected" Value="True">
							<!-- The Triggers required to animate the TabItem when it enters/leaves the "Selected" state (added in part two) -->
							<Trigger.EnterActions>
								<StopStoryboard BeginStoryboardName="sbUnselected_Selected_Exit"/>
								<BeginStoryboard x:Name="sbSelected"
											Storyboard="{StaticResource TabItemStoryBoardSelected}"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard x:Name="sbUnselected_Selected_Exit" Storyboard="{StaticResource TabItemStoryBoardUnselected}"/>
							</Trigger.ExitActions>
							<!-- We want the selected TabItem to always be on top. -->
							<Setter Property="Panel.ZIndex" Value="100" />
							<Setter TargetName="Border" Property="BorderBrush" 
								Value="{StaticResource TabItemBorderBrushSelected}" />
							<Setter TargetName="Border" Property="Background" 
								Value="{StaticResource TabItemBackgroundBrushSelected}" />
							<Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
							<Setter Property="Foreground" 
								Value="{StaticResource TabItemTextBrushSelected}"/>
							<Setter TargetName="Border" Property="Margin" 
								Value="{StaticResource TabItemMarginSelected}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


</ResourceDictionary>